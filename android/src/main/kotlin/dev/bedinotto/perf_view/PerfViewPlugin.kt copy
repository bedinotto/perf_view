package dev.bedinotto.perf_view

import android.app.usage.NetworkStats.Bucket
import android.content.Context
import android.net.TrafficStats
import android.os.Build
import androidx.annotation.NonNull

import io.flutter.embedding.engine.plugins.FlutterPlugin
import io.flutter.plugin.common.MethodCall
import io.flutter.plugin.common.MethodChannel
import io.flutter.plugin.common.MethodChannel.MethodCallHandler
import io.flutter.plugin.common.MethodChannel.Result
import java.util.concurrent.Executors

/** PerfViewPlugin */
class PerfViewPlugin: FlutterPlugin, MethodCallHandler {
  /// The MethodChannel that will the communication between Flutter and native Android
  ///
  /// This local reference serves to register the plugin with the Flutter Engine and unregister it
  /// when the Flutter Engine is detached from the Activity
  private lateinit var context: Context
  private lateinit var channel : MethodChannel
  private var usage: Usage? = null
  private var uid : Int = 0
//  private var rxBytes : Array<Long> = arrayOf(0,0)
//  private var txBytes : Array<Long> = arrayOf(0,0)
//
//  private var rxPackages : Array<Long> = arrayOf(0,0)
//  private var txPackages : Array<Long> = arrayOf(0,0)

  override fun onAttachedToEngine(flutterPluginBinding: FlutterPlugin.FlutterPluginBinding) {
    channel = MethodChannel(flutterPluginBinding.binaryMessenger, "perf_view")
    channel.setMethodCallHandler(this)
    context = flutterPluginBinding.applicationContext
    uid = android.os.Process.myUid()
//    rxBytes[0] = TrafficStats.getUidRxBytes(uid)
//    txBytes[0] = TrafficStats.getUidTxBytes(uid)
//    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
//      theBucket = Bucket()
//      rxBytes[0] = theBucket.rxBytes
//      txBytes[0] = theBucket.txBytes
//    }
  }

  override fun onMethodCall(call: MethodCall, result: Result) {
    when (call.method) {
      "getNetworkInfo" -> {
        val thread = Thread {
          usage = getUsageBytesByUid(context, (System.currentTimeMillis() - 1000), System.currentTimeMillis(), uid)

          // Update UI or perform other actions based on the usage data
        }

        thread.start()
//        usage = getUsageBytesByUid(context,(System.currentTimeMillis()-1000), System.currentTimeMillis(), uid)
//        rxBytes[1] = TrafficStats.getUidRxBytes(uid) - rxBytes[0]
//        txBytes[1] = TrafficStats.getUidTxBytes(uid) - txBytes[0]
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
//          println("Start Time: "+theBucket.startTimeStamp)
//          println("State: "+theBucket.state)
//          rxBytes[1] = theBucket.rxBytes
//          txBytes[1] = theBucket.txBytes
//        }
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
//          val threadPool = Executors.newSingleThreadExecutor {
//              makeQuery -> Thread(makeQuery, "my-background-thread")
//          }
//        }
//        rxBytes[0] = rxBytes[1]
//        txBytes[0] = txBytes[1]
        println("Total Rx Bytes = " + usage?.totalRxBytes)
        println("Total Tx Bytes = " + usage?.totalTxBytes)
        result.success(listOf(usage?.totalRxBytes, usage?.totalTxBytes))
      }
      "getPlatformVersion" -> {
        result.success("Android ${android.os.Build.VERSION.RELEASE}")
      }
      else -> {
        result.notImplemented()
      }
    }
  }

  override fun onDetachedFromEngine(binding: FlutterPlugin.FlutterPluginBinding) {
    channel.setMethodCallHandler(null)
  }
}